@inject IJSRuntime JSRuntime;

<div id="@Id" class="ui @(Labeled ? "labeled" : "") @(Ticked ? "ticked" : "") range slider"></div>

@code {

    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public int Min { get; set; } = 0;
    [Parameter]
    public int Max { get; set; } = 10;
    [Parameter]
    public int Start { get; set; } = 0;
    [Parameter]
    public int End { get; set; } = 10;
    [Parameter]
    public int Step { get; set; } = 1;
    [Parameter]
    public bool Smooth { get; set; } = true;
    [Parameter]
    public bool Labeled { get; set; } = false;
    [Parameter]
    public bool Ticked { get; set; } = false;
    [Parameter]
    public EventCallback<FomRangeSliderEventArgs> OnValueChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Id = Guid.NewGuid().ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/FomRangeSlider.razor.js");

            var dotNetReference = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("fomRangeSlider.init", dotNetReference, Id, Min, Max, Start, End, Step, Smooth);
        }
    }

    [JSInvokable("valueChanged")]
    public async void ValueChanged(int range, int firstVal, int secondVal)
    {
        var args = new FomRangeSliderEventArgs { Range = 3, FirstValue = firstVal, SecondValue = secondVal };
        await OnValueChanged.InvokeAsync(args);
    }
}
