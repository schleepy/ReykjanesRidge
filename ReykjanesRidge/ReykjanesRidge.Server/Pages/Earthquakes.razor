@page "/"
@using ReykjanesRidge.Server.Components
@using ReykjanesRidge.Models;
@using ReykjanesRidge.Models.Dtos;
@using ReykjanesRidge.Models.Settings;
@using ReykjanesRidge.Services.Implementations;
@using Microsoft.AspNetCore.WebUtilities;
@inject IJSRuntime JSRuntime
@inject EarthquakeService EarthquakeService
@inject EarthquakeNotifierService EarthquakeNotifierService
@inject EarthquakeVisualizerSettings EarthquakeVisualizerSettings
@inject NavigationManager NavManager

<PageTitle>Earthquakes in Iceland</PageTitle>

<div id="earthquakeVisualizer" style="cursor:grab"></div>

@if (Loading) {
<div class="ui active dimmer">
    <div class="ui text loader">Loading</div>
</div>
}

<div id="controls" class="ui sidebar right inverted vertical menu">
    <SemButton OnClick="ToggleSidebar"
        Icon=Icon.Times
        Tooltip="Close filter">
    </SemButton>
    <div style="padding:20px">
        <span style="color:white">Magnitude range</span>
        <FomRangeSlider 
            OnValueChanged="FilterChanged"
            Smooth=true 
            Labeled=true
            BottomAlignedLabels=true
            Min=MinMagnitude
            Max=MaxMagnitude
            Start=_userSetMinMagnitude
            End=_userSetMaxMagnitude
            Ticked=true
            Step=0.1m
            ShowThumbTooltip=true
            Color="teal"
            @bind-FirstValue=_userSetMinMagnitude
            @bind-SecondValue=_userSetMaxMagnitude>
        </FomRangeSlider>
        <span style="color:white">Hours since occurance</span>
        <FomRangeSlider
            OnValueChanged="FilterChanged"
            Min=MinHours
            Max=MaxHours
            Start=_userSetMinHours
            End=_userSetMaxHours
            Ticked=true
            Color="blue"
            BottomAlignedLabels=true
            ShowThumbTooltip=true
            MaxLabels=10
            @bind-FirstValue=_userSetMinHours
            @bind-SecondValue=_userSetMaxHours
            Smooth=false
            Labeled=true>
        </FomRangeSlider>
        <span style="color:white">Depth range (km)</span>
        <FomRangeSlider
            OnValueChanged="FilterChanged"
            Min=MinDepth
            Max=MaxDepth
            Start=_userSetMinDepth
            End=_userSetMaxDepth
            BottomAlignedLabels=true
            Ticked=true
            Color="violet"
            MaxLabels=10
            ShowThumbTooltip=true
            @bind-FirstValue=_userSetMinDepth
            @bind-SecondValue=_userSetMaxDepth
            Smooth=false
            Labeled=true>
        </FomRangeSlider>
    </div>
</div>

<div id="earthquakeList" class="ui sidebar left inverted vertical menu">
    <Virtualize Items="@VisibleQuakes" Context="earthquake">
        <div class="earthquakeListInfo" @onclick="@(() => HighlightEarthquake(earthquake))">
            <span style="display:block">@earthquake.TimeStamp</span>
            <span style="font-size:1em"><strong>@earthquake.Magnitude richter @earthquake.FriendlyLocation</strong></span>
        </div>
    </Virtualize>
</div>

@if (!Loading)
{
    <div id="topControls" class="controls">
        <SemButton OnClick="ToggleSidebar"
            Icon=Icon.Cog
            Tooltip="Toggle filter">
        </SemButton>
        <SemButton OnClick="() => standardModal.Show()"
            Icon=Icon.Info
            Tooltip="Toggle filter">
        </SemButton>
    </div>

    <SemModal Id="infoModal" @ref="standardModal">
        <Header>
            A visually pleasing portrayal of earthquakes
        </Header>
        <Content>
            <a href="#">icelandquakes</a> uses meteorological data collected by the <a href="https://en.vedur.is/earthquakes-and-volcanism/earthquakes" target="_blank">Icelandic Meteorological Office</a> and does not guarantee that the displayed earthquakes are portrayed accurately as it is mainly a web technology demonstration.<br /><br />

            If you have any questions or inquiries you can send me an email at <a href="mailto:jgh@tskoli.is">jgh@tskoli.is</a>
        </Content>
    </SemModal>

    <p id="filterInfo">currently displaying earthquakes in Iceland that are between @_userSetMinMagnitude and @_userSetMaxMagnitude in magnitude at depths between @_userSetMinDepth and @_userSetMaxDepth km that occured @(_userSetMinHours == 0 ? $"in the last {_userSetMaxHours} hours" : $"between {_userSetMinHours} and {_userSetMaxHours} hours ago")</p>
}

@code {
    [Parameter]
    public decimal MinMagnitude { get; set; }
    [Parameter]
    public decimal MaxMagnitude { get; set; }
    [Parameter]
    public decimal MinHours { get; set; }
    [Parameter]
    public decimal MaxHours { get; set; }
    [Parameter]
    public decimal MinDepth { get; set; }
    [Parameter]
    public decimal MaxDepth { get; set; }
    [Parameter]
    public bool ThreeD {get; set;} = true;
    [Parameter]
    public bool Loading { get; set; } = true;

    private SemModal standardModal { get; set; }

    private decimal _userSetMinMagnitude,
                    _userSetMaxMagnitude,
                    _userSetMaxDepth,
                    _userSetMinDepth,
                    _userSetMinHours,
                    _userSetMaxHours,
                    _minDays,
                    _maxDays;

    public ICollection<EarthquakeDto> Quakes { get; set; }
    public ICollection<EarthquakeDto> VisibleQuakes { get; set; }
    public IEnumerable<EarthquakeDto> HiddenQuakes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        Quakes = await EarthquakeService.GetAll(); // Get all earthquakes
        VisibleQuakes = Quakes;

        await ParseQuakes();
        await ParseUserSettings();
    }

    protected async Task ParseQuakes()
    {
        var magnitudes = Quakes.Select(e => e.Magnitude);
        var hoursSince = Quakes.Select(e => (DateTime.Now - e.TimeStamp).TotalHours);
        var depths = Quakes.Select(e => e.Depth);

        MinMagnitude = Convert.ToInt32(Math.Floor(magnitudes.Min()));
        MaxMagnitude = Convert.ToInt32(Math.Ceiling(magnitudes.Max()));
        MinHours = Convert.ToInt32(Math.Floor(hoursSince.Min()));
        MaxHours = Convert.ToInt32(Math.Floor(hoursSince.Max()));
        MinDepth = Convert.ToInt32(depths.Min());
        MaxDepth = Convert.ToInt32(depths.Max());
    }

    protected async Task ParseUserSettings()
    {
        // dynamic query test, implement properly later
        #region parse
        // magnitude
        _userSetMinMagnitude = ParseQueryArg("minmagnitude", MinMagnitude, true);
        _userSetMaxMagnitude = ParseQueryArg("maxmagnitude", MaxMagnitude, false);

        // hours
        _userSetMinHours = ParseQueryArg("minhours", MinHours, true);
        _userSetMaxHours = ParseQueryArg("maxhours", MaxHours, false);

        // depth
        _userSetMinDepth = ParseQueryArg("mindepth", MinDepth, true);
        _userSetMaxDepth = ParseQueryArg("maxdepth", MaxDepth, false);
        #endregion parse queries

        // days
        _minDays = Math.Ceiling(_userSetMinHours / 24);
        _maxDays = Math.Ceiling(_userSetMaxHours / 24);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/Pages/Earthquakes.razor.js");

            // Create dotnet reference
            var dotNetReference = DotNetObjectReference.Create(this);

            // Load initial scene
            await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.load", dotNetReference);

            // Render quakes
            var visibleQuakes = GetVisibleQuakes();
            var hiddenQuakes = Quakes.Except(visibleQuakes);
            await AddEarthquake(visibleQuakes);
            await AddEarthquake(hiddenQuakes, false);

            // Render location tags
            await AddLocation(EarthquakeVisualizerSettings.Locations);

            // event handling
            // EarthquakeNotifierService.OnEarthquakeAdded += EarthquakeAdded;
        }
    }

    protected decimal ParseQueryArg(string argument, decimal defaultValue, bool notSmaller)
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(argument, out var data))
            if (notSmaller ? defaultValue <= Convert.ToInt32(data) : defaultValue >= Convert.ToInt32(data))
                return Convert.ToInt32(data);

        return defaultValue;
    }

    public async void EarthquakeAdded(EarthquakeEventArgs e)
    {
        // notify ui
        Quakes.Add(e.Earthquake); // add to general store
        await ParseQuakes(); // rerun calculations
        await AddEarthquake(e.Earthquake); // add to js;
                                           //await FilterChanged(); // run a filter change;
    }

    # region threejs interoperability
    public async Task AddEarthquake(EarthquakeDto earthquakeDto, bool visible = true)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addEarthquake", earthquakeDto, visible);
    }

    public async Task AddEarthquake(IEnumerable<EarthquakeDto> earthquakeDtos, bool visible = true)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addEarthquake", earthquakeDtos, visible);
    }

    public async Task HideEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.hideEarthquake", Id);
    }

    public async Task HideEarthquake(IEnumerable<Guid> Ids)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.hideEarthquake", Ids);
    }

    public async Task ShowEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.showEarthquake", Id);
    }

    public async Task ShowEarthquake(IEnumerable<Guid> Ids)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.showEarthquake", Ids);
    }

    public async Task HighlightEarthquake(EarthquakeDto earthquake)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.highlightEarthquake", earthquake.ID, earthquake.Magnitude);
    }

    public async Task ToggleSidebar()
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.toggleSidebar");
    }

    public async Task AddLocation(Location location)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addLocation", location);
    }

    public async Task AddLocation(IEnumerable<Location> location)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addLocation", location);
    }

    public async Task ToggleCamera()
    {
        ThreeD = !ThreeD;
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.toggleCamera", ThreeD);
    }

    [JSInvokable("getEarthquake")]
    public async Task<EarthquakeDto> GetEarthquake(Guid Id)
    {
        return Quakes.FirstOrDefault(q => q.ID == Id);
    }

    [JSInvokable("loaded")]
    public async Task FinishedLoading()
    {
        Loading = false;
        await InvokeAsync(StateHasChanged);
        await ToggleSidebar();
    }
    #endregion

    public async Task FilterChanged()
    {
        var quakes = Quakes;

        // THIS IS FUCKING HOT DUDE, C# 9.0 DOING IT
        VisibleQuakes = GetVisibleQuakes();

        // Filter out all other quakes
        HiddenQuakes = quakes.Except(VisibleQuakes);

        await ShowEarthquake(VisibleQuakes.Select(q => q.ID));

        await HideEarthquake(HiddenQuakes.Select(q => q.ID));

        await InvokeAsync(StateHasChanged);
    }

    private List<EarthquakeDto> GetVisibleQuakes()
    {
        var quakes = Quakes;

        var visibleQuakes = from quake in quakes
               let hoursSince = Convert.ToDecimal((DateTime.Now - quake.TimeStamp).TotalHours)
               where hoursSince >= _userSetMinHours && hoursSince <= _userSetMaxHours &&
               quake.Magnitude >= _userSetMinMagnitude && quake.Magnitude <= _userSetMaxMagnitude &&
               quake.Depth >= _userSetMinDepth && quake.Depth <= _userSetMaxDepth
               select quake;

        return visibleQuakes.ToList();
    }
}
