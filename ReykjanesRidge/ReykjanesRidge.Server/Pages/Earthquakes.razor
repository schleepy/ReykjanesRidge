@page "/earthquakes"
@using ReykjanesRidge.Server.Components
@using ReykjanesRidge.Models.Dtos;
@using ReykjanesRidge.Services.Implementations;
@inject IJSRuntime JSRuntime
@inject EarthquakeService EarthquakeService

<div id="threejscontainer" style="width: 100%; height: 100%;"></div>

<!--<FomRangeSlider OnValueChanged="ValueChanged" Smooth=false Labeled=true Ticked=true></FomRangeSlider>-->

<div class="ui sidebar right inverted vertical menu" style="background-color:none">
    <FomRangeSlider 
        OnValueChanged="FilterChanged"
        Smooth=false 
        Labeled=true
        Min=MinMagnitude
        Max=MaxMagnitude
        @bind-FirstValue=MinMagnitude
        @bind-SecondValue=MaxMagnitude>
    </FomRangeSlider>
    <FomRangeSlider
        OnValueChanged="FilterChanged"
        Min=MinHours
        Max=MaxHours
        Start=MinHours
        End=MaxHours
        @bind-FirstValue=MinHours
        @bind-SecondValue=MaxHours
        Smooth=false 
        Labeled=true>
    </FomRangeSlider>
    <FomRangeSlider
        OnValueChanged="FilterChanged"
        Min=MinDepth
        Max=MaxDepth
        Start=MinDepth
        End=MaxDepth
        @bind-FirstValue=MinDepth
        @bind-SecondValue=MaxDepth
        Smooth=false 
        Labeled=true>
    </FomRangeSlider>
</div>

<SemButton 
    OnClick="ToggleSidebar" 
    Class="vertical-center" 
    Style="right:10px;z-index:99" 
    Icon=Icon.Cog>
</SemButton>

@code {
    [Parameter]
    public int MinMagnitude { get; set; }
    [Parameter]
    public int MaxMagnitude { get; set; }
    [Parameter]
    public int MinHours { get; set; }
    [Parameter]
    public int MaxHours { get; set; }
    [Parameter]
    public int MinDepth { get; set; }
    [Parameter]
    public int MaxDepth { get; set; }

    public List<EarthquakeDto> Quakes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Quakes = await EarthquakeService.GetAll(); // Get all earthquakes
        var magnitudes = Quakes.Select(e => e.Magnitude);
        var hoursSince = Quakes.Select(e => (DateTime.Now - e.TimeStamp).TotalHours);
        var depths = Quakes.Select(e => e.Depth);
        MinMagnitude = Convert.ToInt32(Math.Floor(magnitudes.Min()));
        MaxMagnitude = Convert.ToInt32(Math.Ceiling(magnitudes.Max()));
        MinHours = Convert.ToInt32(Math.Floor(hoursSince.Min()));
        MaxHours = Convert.ToInt32(Math.Floor(hoursSince.Max()));
        MinDepth = Convert.ToInt32(depths.Min());
        MaxDepth = Convert.ToInt32(depths.Max());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Pages/Earthquakes.razor.js");

            await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.load");

            foreach (var earthquake in Quakes)
            {
                await AddEarthquake(earthquake);
            }
        }
    }

    # region threejs interoperability
    public async Task AddEarthquake(EarthquakeDto earthquakeDto)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addEarthquake", earthquakeDto);
    }

    public async Task HideEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.hideEarthquake", Id);
    }

    public async Task ShowEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.showEarthquake", Id);
    }

    public async Task ToggleSidebar()
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.toggleSidebar");
    }
    #endregion

    public async void FilterChanged()
    {
        // THIS IS FUCKING HOT DUDE, C# 9.0 DOING IT
        var visibleQuakes = from quake in Quakes
                        let hoursSince = (DateTime.Now - quake.TimeStamp).TotalHours
                        where hoursSince >= MinHours && hoursSince <= MaxHours &&
                        quake.Magnitude >= MinMagnitude && quake.Magnitude <= MaxMagnitude &&
                        quake.Depth >= MinDepth && quake.Depth <= MaxDepth
                        select quake;

        // Filter out all other quakes
        var hiddenQuakes = Quakes.Except(visibleQuakes);

        foreach (var earthquake in visibleQuakes)
        {
            await ShowEarthquake(earthquake.ID);
        }

        foreach (var earthquake in hiddenQuakes)
        {
            await HideEarthquake(earthquake.ID);
        }
    }
}
