@page "/earthquakes"
@using ReykjanesRidge.Server.Components
@using ReykjanesRidge.Models.Dtos;
@using ReykjanesRidge.Services.Implementations;
@inject IJSRuntime JSRuntime
@inject EarthquakeService EarthquakeService

<div id="threejscontainer" style="width: 100%; height: 100%;"></div>

<!--<FomRangeSlider OnValueChanged="ValueChanged" Smooth=false Labeled=true Ticked=true></FomRangeSlider>-->

<div class="ui sidebar right inverted vertical menu" style="background-color:gray">
    <FomRangeSlider OnValueChanged="ValueChanged" Smooth=false Labeled=true></FomRangeSlider>
</div>

<SemButton OnClick="ToggleSidebar" Style="position:absolute;top:100px;right:20px;z-index:99">Filter</SemButton>

@code {
    public List<EarthquakeDto> Quakes { get; set; }

    public async void ValueChanged(FomRangeSliderEventArgs e)
    {
        var visibleQuakes = Quakes.Where(q => q.Magnitude > e.FirstValue && q.Magnitude < e.SecondValue);
        var hiddenQuakes = Quakes.Except(visibleQuakes);

        foreach (var earthquake in visibleQuakes)
        {
            await ShowEarthquake(earthquake.ID);
        }

        foreach (var earthquake in hiddenQuakes)
        {
            await HideEarthquake(earthquake.ID);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Pages/Earthquakes.razor.js");

            await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.load");
        }

        Quakes = await EarthquakeService.GetAll();

        foreach (var earthquake in Quakes)
        {
            await AddEarthquake(earthquake);
        }

        //await AddEarthquake(await EarthquakeService.GetOne());
    }

    public async Task AddEarthquake(EarthquakeDto earthquakeDto)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.addEarthquake", earthquakeDto);
    }

    public async Task HideEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.hideEarthquake", Id);
    }

    public async Task ShowEarthquake(Guid Id)
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.showEarthquake", Id);
    }

    public async Task ToggleSidebar()
    {
        await JSRuntime.InvokeVoidAsync("EarthquakeVisualizerJS.toggleSidebar");
    }
}
